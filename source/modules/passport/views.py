from . import passport_blueprint
from source import constants, redis_store
from flask import jsonify, make_response, request,current_app
from source.utility.captcha.captcha import captcha
from source.utility.response_code import RET
from source.externallib.yuntongxun import sms
import re
from random import randint

@passport_blueprint.route('/sms_code', methods=['POST'])
def SMSVerfification():
    postdate=request.json
    mobilephone_number=postdate['mobile']     #mobile, image_code,image_code_id
    image_code = postdate['image_code']
    image_code_id = postdate['image_code_id']
    dummy_mobilephone=request.args.get('mobile',None)
    dummy_image_code_id=request.args.get('image_code_id',None)
    dummy_image_code=request.args.get('image_code',None)
    current_app.logger.debug(
        "phone number from post json is %s, phone number from request args is %s.\n"
        "image code from post json is %s, image code from request args is %s.\n"
        "image code ID from post json is %s, image code ID from request args is %s."
        % (mobilephone_number,dummy_mobilephone,image_code,dummy_image_code,image_code_id,dummy_image_code_id)
    )
    if not all([mobilephone_number, image_code_id,image_code]):
        return make_response(jsonify(errno=RET.NODATA, errmsg="no valid the data from the client for sms verfication"))
    elif not re.match('1[35678][0-9]{9}', mobilephone_number):
        return make_response(jsonify(errno=RET.USERERR,errmsg="the phone number is invalid."))
    else:
        try:
            stored_imagecode=redis_store.get(name="User"+image_code_id)
        except Exception as error:
            current_app.logger.error(error)
            return make_response(jsonify(errno=RET.NODATA, errmsg='error in searching actual image code ID in redis'))
        else:
            if stored_imagecode==None:
                return make_response(jsonify(error=RET.NODATA, errmsg="the stored image id is exprired."))
            else:
                if stored_imagecode.upper()==image_code.upper():
                    sms_verifcation_code="%06d" % randint(0,999999)
                    current_app.logger.debug("The sms verification code is "+ sms_verifcation_code)
                    try:
                        sms_sender=sms.CCP()
                        sms_sender.send_template_sms(mobilephone_number,[sms_verifcation_code,constants.SMS_CODE_REDIS_EXPIRES/60],1)
                    except Exception as error:
                        current_app.logger.error(error)
                        return make_response(jsonify(errno=RET.THIRDERR,errmsg=" SMS sent fail"))
                    else:
                        try:
                            redis_store.setex(name="SMS_VERFICATION"+mobilephone_number, value=sms_verifcation_code,time=constants.SMS_CODE_REDIS_EXPIRES)
                        except Exception as error:
                            current_app.logger.error(error)
                            return make_response(jsonify(errno=RET.DBERR, errmsg="can't save sms verification code into redis"))
                        else:
                            return make_response(jsonify(errno=RET.OK, errmsg=constants.SMS_CODE_REDIS_EXPIRES))
                else:
                    return make_response(jsonify(errno=RET.DATAERR, errmsg='unmatched image verification code'))



@passport_blueprint.route('/image_code')
def GetVerficationImage():
    image_code_id=request.args.get('code_id', None)

    name, verificationcode, image =captcha.generate_captcha()
    current_app.logger.debug("image_code_id sent by client:%s. THe verication code generated by capcha is %s" % (image_code_id,verificationcode))
    try:
        redis_store.setex(name="User"+image_code_id,value=verificationcode,time=constants.IMAGE_CODE_REDIS_EXPIRES)
    except Exception as error:
        current_app.logger.error(error)
        # response_result = make_response('redis error when vefication code storing')
        # response_result.headers['Content-Type'] ='text/html'
        return make_response(jsonify(errno=RET.DBERR,errmsg="redis database connection error"))    # jsonify(**kwargs)
    else:
        response_result=make_response(image)
        response_result.headers['Content-Type']='image/jpeg'
        return response_result
